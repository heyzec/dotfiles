commit 1fbb93a21b20510d694beb9640f6c66651d4568d
Author: heyzec <61238538+heyzec@users.noreply.github.com>
Date:   Sun Oct 12 22:23:49 2025 +0800

    Hacky patches for 3 issues

diff --git a/swhkd/src/daemon.rs b/swhkd/src/daemon.rs
index 9b3d794..ab6b87f 100644
--- a/swhkd/src/daemon.rs
+++ b/swhkd/src/daemon.rs
@@ -4,7 +4,7 @@ use config::Hotkey;
 use evdev::{AttributeSet, Device, InputEventKind, Key};
 use nix::{
     sys::stat::{umask, Mode},
-    unistd::{setgid, setuid, Gid, Uid},
+    unistd::{setgid, setuid, Gid, Uid, initgroups},
 };
 use signal_hook::consts::signal::*;
 use signal_hook_tokio::Signals;
@@ -12,6 +12,7 @@ use std::{
     collections::{HashMap, HashSet},
     env,
     error::Error,
+    ffi::CString,
     fs::{self, File, OpenOptions, Permissions},
     io::{Read, Write},
     os::unix::{fs::PermissionsExt, net::UnixStream},
@@ -60,7 +61,9 @@ struct Args {
     debug: bool,
 
     /// Take a list of devices from the user
-    #[arg(short = 'D', long, num_args = 0.., value_delimiter = ' ')]
+    /// PATCHED: Change '.*' to ',' to separate multiple devices
+    /// See https://github.com/waycrate/swhkd/issues/309
+    #[arg(short = 'D', long, num_args = 0.., value_delimiter = ',')]
     device: Vec<String>,
 
     /// Set a custom log file. (Defaults to ${XDG_DATA_HOME:-$HOME/.local/share}/swhks-current_unix_time.log)
@@ -195,7 +198,10 @@ async fn main() -> Result<(), Box<dyn Error>> {
             let log = log.clone();
 
             // Set the user and group id to the invoking user for the thread
-            setgid(Gid::from_raw(invoking_uid))
+            // PATCHED: Hardcode GID
+            // See https://github.com/waycrate/swhkd/issues/320
+            let _ = initgroups(&CString::new("heyzec").unwrap(), Gid::from_raw(100));
+            setgid(Gid::from_raw(100))
                 .expect(&format!("Failed to set group-id to {}", invoking_uid));
             setuid(Uid::from_raw(invoking_uid))
                 .expect(&format!("Failed to set user-id to {}", invoking_uid));
@@ -650,14 +656,17 @@ pub async fn send_command(
 
 /// Get the UID of the user that is not a system user
 fn get_uid() -> Result<u32, Box<dyn Error>> {
-    let status_content = fs::read_to_string(format!("/proc/{}/loginuid", std::process::id()))?;
-    let uid = status_content.trim().parse::<u32>()?;
-    if uid == u32::MAX {
-        // loginuid == u32::MAX ('-1' in unsigned long), means the value is unset
-        return Err(format!("loginuid not set for process {}", std::process::id()).into());
-    }
-
-    Ok(uid)
+    // let status_content = fs::read_to_string(format!("/proc/{}/loginuid", std::process::id()))?;
+    // let uid = status_content.trim().parse::<u32>()?;
+    // if uid == u32::MAX {
+    //     // loginuid == u32::MAX ('-1' in unsigned long), means the value is unset
+    //     return Err(format!("loginuid not set for process {}", std::process::id()).into());
+    // }
+
+    // Ok(uid)
+    // PATCHED: Hardcoded to user 1000
+    // See https://github.com/waycrate/swhkd/issues/319
+    Ok(1000)
 }
 
 fn get_file_paths(runtime_dir: &str) -> (String, String) {
